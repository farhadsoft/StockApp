@using Microsoft.AspNetCore.Mvc
@using Microsoft.Identity.Web
@using Microsoft.Extensions.Options
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IOptionsMonitor<MicrosoftIdentityOptions> microsoftIdentityOptions

<AuthorizeView>
    <Authorized>
        @if (canEditProfile)
        {
            <a href="MicrosoftIdentity/Account/EditProfile">Hello, @userName (@storeName)</a>
        }
        else
        {
            <text>Hello, @userName (@storeName)</text>
        }
        <a href="MicrosoftIdentity/Account/SignOut">Log out</a>
    </Authorized>
    <NotAuthorized>
        <a href="MicrosoftIdentity/Account/SignIn">Log in</a>
    </NotAuthorized>
</AuthorizeView>

@code {
    public string? userName;
    public string? storeName;
    private bool canEditProfile;

    protected override async void OnInitialized()
    {
        var options = microsoftIdentityOptions.CurrentValue;
        canEditProfile = !string.IsNullOrEmpty(options.EditProfilePolicyId);
        await GetClaimsPrincipalData();
    }

    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User.Claims;
        userName = user.FirstOrDefault(x => x.Type == "name")?.Value;
        storeName = user.FirstOrDefault(x => x.Type == "extension_StoreName")?.Value;
    }
}