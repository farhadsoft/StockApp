@page "/"
@using System.Net.Http.Json
@using System.Text.Json
@using StockApp.Data;
@inject HttpClient httpClient

<PageTitle>Product search page</PageTitle>
<div class="align-items-center">
    <RadzenAutoComplete TextProperty="Name" Data=@productsName Style="margin-bottom: 20px; width: 100%" Change=@(args => Search(args)) />
    <RadzenDataGrid TItem="Product" Data="@products" EmptyText="@emptyText" Style="width: 100%">
        <Columns>
            <RadzenDataGridColumn TItem="Product" Property="Name" Title="Name" />
            <RadzenDataGridColumn TItem="Product" Property="Seria" Title="Seria" />
            <RadzenDataGridColumn TItem="Product" Property="Quantity" Title="Quantity" />
        </Columns>
    </RadzenDataGrid>
</div>

@code {
    private IEnumerable<Product>? products;
    private IEnumerable<Product>? productsName;
    private string emptyText = "No item selected";

    protected async override Task OnInitializedAsync()
    {
        productsName = await GetAllNames();
        products = new List<Product>();
    }

    private async Task Search(object value)
    {
        HttpClient client = new HttpClient();
        if (value is not null)
        {
            var searchText = value.ToString();
            var result = await client.GetFromJsonAsync<IEnumerable<Product>>($"http://***REMOVED***:49158/api/Products/{searchText}");
            if(result is not null && !string.IsNullOrWhiteSpace(searchText))
            {
                products = result;
            }
        }
    }

    private async ValueTask<IEnumerable<Product>> GetAllNames()
    {
        HttpClient client = new HttpClient();
        var result = await client.GetFromJsonAsync<IEnumerable<Product>>($"http://***REMOVED***:49158/api/Products").ConfigureAwait(false);
        return result ?? new List<Product>();
    }
}